{"version":3,"sources":["Cell.js","Board.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","resetGame","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tableBoard","key","flipCellsAround","defaultProps","Footer","year","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c43129c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.25,\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard(),\n\t\t};\n\t\tthis.resetGame = this.resetGame.bind(this);\n\t}\n\n\tcreateBoard() {\n\t\tlet board = [];\n\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\n\t\treturn board;\n\t}\n\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [y, x] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\t\tflipCell(y, x);\n\t\tflipCell(y, x - 1);\n\t\tflipCell(y, x + 1);\n\t\tflipCell(y - 1, x);\n\t\tflipCell(y + 1, x);\n\n\t\tlet hasWon = board.every((row) => row.every((cell) => !cell));\n\t\tthis.setState({ board, hasWon });\n\t}\n\n\tresetGame() {\n\t\tthis.setState({\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard(),\n\t\t});\n\t}\n\n\trender() {\n\t\tif (this.state.hasWon) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>You won the game! Congratulations!!!!</h1>\n\t\t\t\t\t<button className='reset-game' onClick={this.resetGame}>\n\t\t\t\t\t\tReset Game!\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t//comment\n\t\tlet tableBoard = [];\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\tlet coord = `${y}-${x}`;\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={coord}\n\t\t\t\t\t\tisLit={this.state.board[y][x]}\n\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(coord)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\ttableBoard.push(<tr key={y}>{row}</tr>);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className='Board-title'>\n\t\t\t\t\tThe <span className='title'>\"Lights Out\"</span> Game\n\t\t\t\t</h1>\n\t\t\t\t<p>Turn all the lights off to win the game!</p>\n\t\t\t\t<p className='Board-text'></p>\n\t\t\t\t<table className='Board'>\n\t\t\t\t\t<tbody>{tableBoard}</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from 'react';\r\nimport './footer.css';\r\n\r\nclass Footer extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tlet year = new Date().getFullYear();\r\n\r\n\t\tthis.state = {\r\n\t\t\tyear: year,\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<footer className='Footer'>\r\n\t\t\t\t<h6>Made by Marian Barbieru &copy; {this.state.year}</h6>\r\n\t\t\t</footer>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\nimport Footer from './Footer';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Board />\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}